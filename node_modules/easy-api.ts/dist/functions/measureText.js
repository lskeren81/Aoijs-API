"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.data=void 0;const builder_1=require("../classes/builder"),utils_1=require("../classes/utils");exports.data={data:(new builder_1.FunctionBuilder).setName("measureText").setValue("description","Get metrics from a text (width | height).").setValue("use","$measureText[text;type(width/height/object)]").setValue("returns","Number | Object"),code:async e=>{if(await e.func?.resolve_fields(e),!e.func?.inside)return utils_1.Utils.Warn("Invalid inside provided in:",e.func?.name);if(!e._.Canvas?.ctx)return utils_1.Utils.Warn("Not canvas found, create one first using $createCanvas, in:",e.func.name);let[t,i]=e.func.fields.map(({value:e})=>e);var s;return["width","height","object"].some(e=>e===i.toLowerCase())?(s={width:e._.Canvas.ctx.measureText(t.unescape()).width,height:(0,utils_1.getTextHeight)(e._.Canvas.ctx,t.unescape(),e._.Canvas.ctx.font)},s="object"===i.toLowerCase()?JSON.stringify(s):"width"===i.toLowerCase()?s.width:s.height.toString(),{code:e.code.replace(e.func.id,s)}):utils_1.Utils.Warn("Invalid type provided in:",e.func.name)}};