"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.data=void 0;const tslib_1=require("tslib"),builder_1=require("../classes/builder"),utils_1=require("../classes/utils"),lodash_1=tslib_1.__importDefault(require("lodash"));exports.data={data:(new builder_1.FunctionBuilder).setName("arrayFill").setValue("description","Replace an array element with something.").setValue("use","$arrayFill[varname;element;something?]").setValue("returns","Void"),code:async e=>{if(await e.func?.resolve_fields(e),!e.func?.inside)return utils_1.Utils.Warn("Invalid inside provided in:",e.func?.name);if(e.func.fields.length<2)return utils_1.Utils.Warn("Invalid fields provided in:",e.func.name);let[i,a,s]=e.func.fields.map(({value:e})=>e);var l,r=e._.vars?.[i.unescape()];return r&&Array.isArray(r)?(0<=(l=lodash_1.default.findIndex(r,e=>lodash_1.default.isEqual(e,utils_1.Utils.parse(a.unescape()))))&&(s?r.splice(l,1,utils_1.Utils.parse(s.unescape())):r.splice(l,1),e._.vars[i.unescape()]=r),{code:e.code.replace(e.func.id,"")}):utils_1.Utils.Warn("Invalid variable/array provided in:",e.func.name)}};